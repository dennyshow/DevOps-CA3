trigger:
- main

pool:
  vmImage: 'ubuntu-latest'

variables:
  javaVersion: '17'

stages:
- stage: Build
  jobs:
  - job: BuildJob
    steps:
    - task: JavaToolInstaller@0
      inputs:
        versionSpec: '$(javaVersion)'
        jdkArchitectureOption: 'x64'
        jdkSourceOption: 'PreInstalled'
    
    - task: Gradle@3
      inputs:
        workingDirectory: ''
        gradleWrapperFile: 'gradlew'
        gradleOptions: '-Xmx3072m'
        javaHomeOption: 'JDKVersion'
        jdkVersionOption: '$(javaVersion)'
        jdkArchitectureOption: 'x64'
        publishJUnitResults: true
        testResultsFiles: '**/TEST-*.xml'
        tasks: 'clean build'

    # Archive build outputs
    - task: CopyFiles@2
      inputs:
        contents: |
          **/build/libs/*.jar
        targetFolder: '$(Build.ArtifactStagingDirectory)'
    
    - task: PublishBuildArtifacts@1
      inputs:
        pathToPublish: '$(Build.ArtifactStagingDirectory)'
        artifactName: 'build-outputs'

- stage: Test
  displayName: 'Test Stage'
  dependsOn: Build
  jobs:
  - job: RunSeleniumTests
    displayName: 'Run Selenium Tests'
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    # Step 1: Checkout the repository
    - task: Checkout@1

    # Step 2: Download Build Artifact
    - task: DownloadBuildArtifacts@0
      inputs:
        buildType: 'current'
        downloadType: 'single'
        artifactName: 'build-outputs'
        downloadPath: '$(System.DefaultWorkingDirectory)'

    # Step 3: Start the Application
    - script: |
        java -jar $(System.DefaultWorkingDirectory)/build/libs/*.jar &
        echo "Waiting for application to start..."
        sleep 15 # Wait for the application to be fully initialized
      displayName: 'Start Application'

    # Step 4: Run Selenium Tests
    - task: Gradle@3
      inputs:
        workingDirectory: ''
        gradleWrapperFile: 'gradlew'
        gradleOptions: '-Xmx3072m'
        javaHomeOption: 'JDKVersion'
        jdkVersionOption: '17'
        jdkArchitectureOption: 'x64'
        publishJUnitResults: true
        testResultsFiles: '**/TEST-*.xml'
        tasks: 'clean test'

    - script: |
        export CI=true
        ./gradlew clean test
      displayName: 'Run Tests via Script'
