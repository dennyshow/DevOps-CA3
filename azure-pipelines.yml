trigger:
- main

pool:
  vmImage: 'ubuntu-latest'

variables:
  javaVersion: '17'
  CHROME_DRIVER_URL: 'https://chromedriver.storage.googleapis.com/131.0.6778.205/chromedriver_win32.zip'
  CHROME_DRIVER_PATH: 'chromedriver_win32'

stages:
- stage: Build
  jobs:
  - job: BuildJob
    steps:
    - task: JavaToolInstaller@0
      inputs:
        versionSpec: '$(javaVersion)'
        jdkArchitectureOption: 'x64'
        jdkSourceOption: 'PreInstalled'
    
    - task: Gradle@3
      inputs:
        workingDirectory: ''
        gradleWrapperFile: 'gradlew'
        gradleOptions: '-Xmx3072m'
        javaHomeOption: 'JDKVersion'
        jdkVersionOption: '$(javaVersion)'
        jdkArchitectureOption: 'x64'
        publishJUnitResults: true
        testResultsFiles: '**/TEST-*.xml'
        tasks: 'clean build test jacocoTestReport'

    # Archive build outputs and test reports
    - task: CopyFiles@2
      inputs:
        contents: |
          **/build/**
          **/build/reports/jacoco/**
        targetFolder: '$(Build.ArtifactStagingDirectory)'
    
    - task: PublishBuildArtifacts@1
      inputs:
        pathToPublish: '$(Build.ArtifactStagingDirectory)'
        artifactName: 'build-outputs'

    # Publish code coverage results
    - task: PublishCodeCoverageResults@2
      inputs:
        summaryFileLocation: '$(System.DefaultWorkingDirectory)/**/build/reports/jacoco/test/jacocoTestReport.xml'
        pathToSources: '$(System.DefaultWorkingDirectory)/src/main/java/'
        failIfCoverageEmpty: true
    
- stage: CodeAnalysis
  jobs:
  - job: SonarCloudAnalysis
    steps:
    - checkout: self
      fetchDepth: 0

    # Download build artifacts for analysis
    - task: DownloadBuildArtifacts@0
      inputs:
        buildType: 'current'
        downloadType: 'single'
        artifactName: 'build-outputs'
        downloadPath: '$(System.DefaultWorkingDirectory)'

    - task: SonarCloudPrepare@3
      inputs:
        SonarCloud: 'SonarConnection'
        organization: 'x00078774'
        scannerMode: 'other'
        extraProperties: |
          # Additional properties that will be passed to the scanner
          sonar.projectKey='X00078774_DevOps_CA3'
          sonar.projectName='DevOps_CA3'
          sonar.java.binaries=$(System.DefaultWorkingDirectory)/**/build/classes
          sonar.coverage.jacoco.xmlReportPaths=$(System.DefaultWorkingDirectory)/**/build/reports/jacoco/test/jacocoTestReport.xml
          sonar.junit.reportPaths=$(System.DefaultWorkingDirectory)/**/build/test-results/test
          sonar.java.libraries=$(System.DefaultWorkingDirectory)/**/build/libs/*.jar

    - task: Gradle@3
      inputs:
        workingDirectory: ''
        gradleWrapperFile: 'gradlew'
        gradleOptions: '-Xmx3072m'
        javaHomeOption: 'JDKVersion'
        jdkVersionOption: '$(javaVersion)'
        jdkArchitectureOption: 'x64'
        tasks: 'sonar'

    - task: SonarCloudPublish@3
      inputs:
        pollingTimeoutSec: '300'

# add security scanning
- stage: SecurityScanning
  displayName: 'Security Scanning'
  jobs:
  - job: SecurityCheck
    steps:
    # Download artifacts from previous build stage
    - task: DownloadBuildArtifacts@0
      inputs:
        buildType: 'current'
        downloadType: 'single'
        artifactName: 'build-outputs'
        downloadPath: '$(System.DefaultWorkingDirectory)'

    # Run security scanning
    - task: MicrosoftSecurityDevOps@1
      inputs:
        categories: 'sources'
        break: false # Starting with false to avoid breaking builds
        tools: 'credscan'    # Basic credential scanning
        sourcePath: '$(System.DefaultWorkingDirectory)'

- stage: DependencySecurity
  displayName: 'Dependency Security Scanning'
  jobs:
  - job: OWASPCheck
    steps:
    - task: dependency-check-build-task@6
      inputs:
        projectName: '$(Build.Repository.Name)'
        scanPath: '$(System.DefaultWorkingDirectory)'
        format: 'HTML'
        uploadReports: true
        uploadSARIFReport: true
        failOnCVSS: '7'
        nvdApiKey: '2c3d82d7-c688-49e1-970b-254e2295ab36'

# Test Stage
- stage: Test
  displayName: 'Test Stage'
  dependsOn: Build
  jobs:
  - job: RunSeleniumTests
    displayName: 'Run Selenium Tests'
    pool:
      vmImage: 'windows-latest'
    steps:
    # Step 1: Checkout the repository
    - task: Checkout@1

    # Step 2: Set up JDK
    - task: JavaToolInstaller@0
      inputs:
        versionSpec: '$(javaVersion)'
        jdkArchitectureOption: 'x64'
        jdkSourceOption: 'PreInstalled'

    # Step 3: Install Chrome Browser
    - powershell: |
        $chromeInstallerPath = "$env:USERPROFILE\chrome_installer.exe"
        Invoke-WebRequest -Uri "https://dl.google.com/chrome/install/latest/chrome_installer.exe" -OutFile $chromeInstallerPath
        Start-Process -FilePath $chromeInstallerPath -ArgumentList '/silent', '/install' -NoNewWindow -Wait
      displayName: 'Install Google Chrome'

    # Step 4: Download ChromeDriver
    - powershell: |
        Invoke-WebRequest -Uri $(CHROME_DRIVER_URL) -OutFile chromedriver.zip
        Expand-Archive -Path chromedriver.zip -DestinationPath $(CHROME_DRIVER_PATH)
      displayName: 'Download and Setup ChromeDriver'

    # Step 5: Cache Gradle Dependencies
    - task: Cache@2
      inputs:
        key: 'gradle | "$(Agent.OS)" | gradle-wrapper.properties'
        path: ~/.gradle/caches
        restoreKeys: |
          gradle | "$(Agent.OS)"

    # Step 6: Run Selenium Tests
    - script: |
        ./gradlew clean test
      displayName: 'Run Selenium Tests'

    # Step 7: Publish Test Results
    - task: PublishTestResults@2
      inputs:
        testResultsFiles: '**/build/test-results/**/*.xml'
        testRunTitle: 'Selenium Test Results'

