trigger:
- main

pool:
  vmImage: 'ubuntu-latest'

variables:
  javaVersion: '17'

stages:
- stage: Build
  jobs:
  - job: BuildJob
    steps:
    - task: JavaToolInstaller@0
      inputs:
        versionSpec: '$(javaVersion)'
        jdkArchitectureOption: 'x64'
        jdkSourceOption: 'PreInstalled'
    
    - task: Gradle@3
      inputs:
        workingDirectory: ''
        gradleWrapperFile: 'gradlew'
        gradleOptions: '-Xmx3072m'
        javaHomeOption: 'JDKVersion'
        jdkVersionOption: '$(javaVersion)'
        jdkArchitectureOption: 'x64'
        publishJUnitResults: true
        testResultsFiles: '**/TEST-*.xml'
        tasks: 'clean build test jacocoTestReport'

    # Archive build outputs and test reports
    - task: CopyFiles@2
      inputs:
        contents: |
          **/build/**
          **/build/reports/jacoco/**
        targetFolder: '$(Build.ArtifactStagingDirectory)'
    
    - task: PublishBuildArtifacts@1
      inputs:
        pathToPublish: '$(Build.ArtifactStagingDirectory)'
        artifactName: 'build-outputs'

    # Publish code coverage results
    - task: PublishCodeCoverageResults@2
      inputs:
        summaryFileLocation: '$(System.DefaultWorkingDirectory)/**/build/reports/jacoco/test/jacocoTestReport.xml'
        pathToSources: '$(System.DefaultWorkingDirectory)/src/main/java/'
        failIfCoverageEmpty: true
    
- stage: CodeAnalysis
  jobs:
  - job: SonarCloudAnalysis
    steps:
    - checkout: self
      fetchDepth: 0

    # Download build artifacts for analysis
    - task: DownloadBuildArtifacts@0
      inputs:
        buildType: 'current'
        downloadType: 'single'
        artifactName: 'build-outputs'
        downloadPath: '$(System.DefaultWorkingDirectory)'

    - task: SonarCloudPrepare@3
      inputs:
        SonarCloud: 'SonarConnection'
        organization: 'x00078774'
        scannerMode: 'other'
        extraProperties: |
          # Additional properties that will be passed to the scanner
          sonar.projectKey='X00078774_DevOps_CA3'
          sonar.projectName='DevOps_CA3'
          sonar.java.binaries=$(System.DefaultWorkingDirectory)/**/build/classes
          sonar.coverage.jacoco.xmlReportPaths=$(System.DefaultWorkingDirectory)/**/build/reports/jacoco/test/jacocoTestReport.xml
          sonar.junit.reportPaths=$(System.DefaultWorkingDirectory)/**/build/test-results/test
          sonar.java.libraries=$(System.DefaultWorkingDirectory)/**/build/libs/*.jar

    - task: Gradle@3
      inputs:
        workingDirectory: ''
        gradleWrapperFile: 'gradlew'
        gradleOptions: '-Xmx3072m'
        javaHomeOption: 'JDKVersion'
        jdkVersionOption: '$(javaVersion)'
        jdkArchitectureOption: 'x64'
        tasks: 'sonar'

    - task: SonarCloudPublish@3
      inputs:
        pollingTimeoutSec: '300'

# add security scanning
- stage: SecurityScanning
  displayName: 'Security Scanning'
  jobs:
  - job: SecurityCheck
    steps:
    # Download artifacts from previous build stage
    - task: DownloadBuildArtifacts@0
      inputs:
        buildType: 'current'
        downloadType: 'single'
        artifactName: 'build-outputs'
        downloadPath: '$(System.DefaultWorkingDirectory)'

    # Run security scanning
    - task: MicrosoftSecurityDevOps@1
      inputs:
        categories: 'sources'
        break: false # Starting with false to avoid breaking builds
        tools: 'credscan'    # Basic credential scanning
        sourcePath: '$(System.DefaultWorkingDirectory)'

- stage: DependencySecurity
  displayName: 'Dependency Security Scanning'
  jobs:
  - job: OWASPCheck
    steps:
    - task: dependency-check-build-task@6
      inputs:
        projectName: '$(Build.Repository.Name)'
        scanPath: '$(System.DefaultWorkingDirectory)'
        format: 'HTML'
        uploadReports: true
        uploadSARIFReport: true
        failOnCVSS: '7'
        nvdApiKey: '2c3d82d7-c688-49e1-970b-254e2295ab36'

- stage: Deploy
  jobs:
  - deployment: DeployJob
    pool:
      vmImage: 'ubuntu-latest'
    environment: 'Test'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: JavaToolInstaller@0
            inputs:
              versionSpec: '$(javaVersion)'
              jdkArchitectureOption: 'x64'
              jdkSourceOption: 'PreInstalled'
          
          # Download application
          - task: DownloadBuildArtifacts@0
            inputs:
              buildType: 'current'
              downloadType: 'single'
              artifactName: 'build-outputs'
              downloadPath: '$(System.ArtifactsDirectory)'
          
          # Setup and start service
          - script: |
              JAR_FILE="$(System.ArtifactsDirectory) -name *SNAPSHOT.jar"
              if [ -z "$JAR_FILE" ]; then
                echo "JAR file not found at: $JAR_FILE"
                ls -R $(System.ArtifactsDirectory)
                exit 1
              fi
              echo "Found JAR file: $JAR_FILE"
              
              # Find Java 17 path
              JAVA_HOME=$(dirname $(dirname $(readlink -f $(which java))))
              echo "JAVA_HOME: $JAVA_HOME"
              
              # Copy JAR to a permanent location
              sudo mkdir -p /opt/springapp
              sudo cp "$JAR_FILE" /opt/springapp/app.jar
              
              # Create service file
              sudo tee /etc/systemd/system/springapp.service << EOF
              [Unit]
              Description=Spring Boot Application
              After=network.target
              
              [Service]
              Type=simple
              User=vsts
              Environment="JAVA_HOME=$JAVA_HOME"
              ExecStart=$JAVA_HOME/bin/java -jar -Dserver.address=0.0.0.0 /opt/springapp/app.jar
              Restart=always
              WorkingDirectory=/opt/springapp
              
              [Install]
              WantedBy=multi-user.target
              EOF
              
              # Start service
              sudo systemctl daemon-reload
              sudo systemctl enable springapp
              sudo systemctl start springapp
              
              # Check status and logs
              sleep 5
              sudo systemctl status springapp
              sudo journalctl -u springapp --no-pager -n 50
            displayName: 'Deploy Spring Boot app as service'

          # Install JMeter
          - task: JMeterInstaller@0
            inputs:
              jmeterVersion: '5.6.3'
    
          # Create directories for results
          - task: Bash@3
            displayName: 'Create Results Directories'
            inputs:
              targetType: 'inline'
              script: |
                mkdir -p $(Build.ArtifactStagingDirectory)/jmeter/homepage-dashboard
                mkdir -p $(Build.ArtifactStagingDirectory)/jmeter/calculate-dashboard

          # Run Homepage Test
          - task: CmdLine@2
            displayName: 'Run Homepage Test'
            inputs:
              script: |
                jmeter -n -t $(Pipeline.Workspace)/**/performance-tests/performance-Test.jmx \
                      -l $(Build.ArtifactStagingDirectory)/jmeter/homepage-results.jtl \
                      -e -o $(Build.ArtifactStagingDirectory)/jmeter/homepage-dashboard

          # Run Calculate Test
          - task: CmdLine@2
            displayName: 'Run Calculate Test'
            inputs:
              script: |
                jmeter -n -t $(Pipeline.Workspace)/build-outputs/performance-tests/calculate-test.jmx \
                      -l $(Build.ArtifactStagingDirectory)/jmeter/calculate-results.jtl \
                      -e -o $(Build.ArtifactStagingDirectory)/jmeter/calculate-dashboard
    
          # Publish Results
          - task: PublishBuildArtifacts@1
            inputs:
              pathToPublish: '$(Build.ArtifactStagingDirectory)/jmeter'
              artifactName: 'jmeter-results'
