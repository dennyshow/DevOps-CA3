trigger:
- main

pool:
  vmImage: 'ubuntu-latest'

variables:
  javaVersion: '17'

stages:
- stage: Build
  jobs:
  - job: BuildJob
    steps:
    - task: JavaToolInstaller@0
      inputs:
        versionSpec: '$(javaVersion)'
        jdkArchitectureOption: 'x64'
        jdkSourceOption: 'PreInstalled'
    
    - task: Gradle@2
      inputs:
        workingDirectory: ''
        gradleWrapperFile: 'gradlew'
        gradleOptions: '-Xmx3072m'
        javaHomeOption: 'JDKVersion'
        jdkVersionOption: '$(javaVersion)'
        jdkArchitectureOption: 'x64'
        publishJUnitResults: true
        testResultsFiles: '**/TEST-*.xml'
        tasks: 'clean build test jacocoTestReport'

    - task: CopyFiles@2
      inputs:
        contents: |
          **/build/**
          **/build/reports/jacoco/**
        targetFolder: '$(Build.ArtifactStagingDirectory)'

    - task: PublishBuildArtifacts@1
      inputs:
        pathToPublish: '$(Build.ArtifactStagingDirectory)'
        artifactName: 'drop'

    # Publish code coverage results
    - task: PublishCodeCoverageResults@2
      inputs:
        summaryFileLocation: '$(System.DefaultWorkingDirectory)/**/build/reports/jacoco/test/jacocoTestReport.xml'
        pathToSources: '$(System.DefaultWorkingDirectory)/src/main/java/'
        failIfCoverageEmpty: true
    
     # Download build artifacts for analysis
    - task: DownloadBuildArtifacts@0
      inputs:
        buildType: 'current'
        downloadType: 'single'
        artifactName: 'build-outputs'
        downloadPath: '$(Build.ArtifactStagingDirectory)'


- stage: Deploy
  jobs:
  - deployment: DeployJob
    pool:
      vmImage: 'ubuntu-latest'
    environment: 'Dev'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: JavaToolInstaller@0
            inputs:
              versionSpec: '$(javaVersion)'
              jdkArchitectureOption: 'x64'
              jdkSourceOption: 'PreInstalled'
          
          - task: DownloadBuildArtifacts@0
            inputs:
              buildType: 'current'
              downloadType: 'single'
              artifactName: 'drop'
              downloadPath: '$(System.ArtifactsDirectory)'
          
          - script: |
              JAR_FILE=$(find $(System.ArtifactsDirectory) -name *SNAPSHOT.jar)
              if [ -z "$JAR_FILE" ]; then
                echo "No JAR file found"
                exit 1
              fi
              echo "Found JAR file: $JAR_FILE"
              java -jar $JAR_FILE &
            displayName: 'Deploy Spring Boot app'
